#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
		if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" = 'false' ]; then
			local status_output='';
			if ! status_output="$(git status --porcelain --branch 2>/dev/null)"; then
				return;
			fi;

			local staged=0;
			local unstaged=0;
			local untracked=0;
			local stashed=0;
			local line='';

			while IFS= read -r line; do
				case "${line:0:2}" in
					'??')
						untracked=1;
						;;
					'##')
						;;
					*)
						if [[ "${line:0:1}" != ' ' ]]; then
							staged=1;
						fi;
						if [[ "${line:1:1}" != ' ' ]]; then
							unstaged=1;
						fi;
						;;
				esac;

				if (( staged && unstaged && untracked )); then
					break;
				fi;
			done <<< "${status_output}";

			if git rev-parse --verify refs/stash >/dev/null 2>&1; then
				stashed=1;
			fi;

			(( staged )) && s+='+';
			(( unstaged )) && s+='*';
			(( untracked )) && s+='u';
			(( stashed )) && s+='s';
		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" ${s}";

		echo -e "${1}${branchName}${2}${s}"; # Place [] at end of branch name with symbols
	else
		return;
	fi;
}

bold='';
reset="\e[0m";
black="\e[1;30m";
blue="\e[1;34m";
cyan="\e[1;36m";
green="\e[1;32m";
orange="\e[1;33m";
purple="\e[1;35m";
red="\e[1;31m";
violet="\e[1;35m";
white="\e[1;37m";
yellow="\e[1;33m";

userStyle="${blue}";
hostStyle="${yellow}";

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
if [[ "${SSH_TTY}" ]]; then # only show hostname when using SSH
    PS1+="\[${white}\] at ";
    PS1+="\[${hostStyle}\]\h"; # host
fi;
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${blue}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${white}\]> \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
