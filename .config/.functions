#!/usr/bin/env bash

# Open directory in [v]im (neovim, else vi(m))
function v() {
	# open current directory if no valid argument given
	local dir="."
	[[ -n "$1" && -e "$1" ]] && dir=$1
	if command -v nvim >/dev/null 2>&1; then
		nvim "$dir" 
	else
		vi "$dir" 
	fi

}

# [s]earch [f]iles (text-readable, unhidden) with fzf fuzzy finding, open in (neo)vim
# sf -a includes all hidden files that aren't .git
function sf() {
	local dir=""
	# Find all "regular" files with rg, and open list in fzf
	if [[ -n "$1" && $1 == "-a" ]]; then
		dir=$(rg --files-with-matches --no-messages --hidden --glob '!.git' . | fzf)
		# sf -a includes all hidden files that aren't .git
	else 
		dir=$(rg --files-with-matches --no-messages . | fzf)
		# hidden files excluded by default
	fi
	# Runs if result non-empty and regular file
	if [[ -n "$dir" && -f "$dir" ]]; then
		v "$dir" # Makes use of v()
	fi
}

# [s]earch [d]irectory with fzf fuzzy finding, cd there
function sd() {
	local dir=$(find . -type d \( ! -path '*.git*' \) | fzf)
    [[ -n "$dir" && -d "$dir" ]] && builtin cd "$dir"
}


# Update environment variables in tmux (used in .bash_profile)
function update_environment_from_tmux() {
  if [ -n "${TMUX}" ]; then
    eval "$(tmux show-environment -s)"
  fi
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Decode \x{ABCD}-style Unicode escape sequences (referenced in .macos)
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# `o` with no arguments opens the current directory (I use this all the time)
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
